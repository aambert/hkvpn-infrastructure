version: 2.1

references:

  ## Docker image configuration

  config: &config
    working_directory: ~/workspace
    docker:
      - image: ayltai/hkvpn-infrastructure:latest
    environment:
      TERM: dumb

jobs:

  check:
    <<: *config
    steps:
      - checkout
      - run:
          name: Check if Terraform scripts are properly formatted
          command: terraform fmt -check -write=false
          working_directory: terraform
      - run:
          name: Lint Ansible scripts
          command: ansible-lint ./playbook.yml
          working_directory: ansible

  deploy_digitalocean:
    <<: *config
    steps:
      - checkout
      - run:
          name: Configure credentials for accessing Terraform Cloud backend
          command: echo $TERRAFORM_TOKEN | base64 -di > ~/.terraformrc
      - run:
          name: Create .ssh directory to store keys
          command: mkdir -p /home/ubuntu/.ssh && mkdir ~/.ssh
      - run:
          name: Configure API private key for provisioning the system
          command: echo $API_PRIVATE_KEY | base64 -di > /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Configure SSH private key for accessing the system to be provisioned
          command: echo $SSH_PRIVATE_KEY | base64 -di > ~/.ssh/hkvpn.key
      - run:
          name: Change API private key permission
          command: chmod 400 /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Change SSH private key permission
          command: chmod 400 ~/.ssh/hkvpn.key
      - run:
          name: Create Ansible Vault password file
          command: echo $VAULT_PASSWORD_FILE | base64 -di > ~/vault.pass
      - run:
          name: Initialize Terraform backend and plugins
          command: echo 1 | terraform init
          working_directory: terraform-digitalocean
      - run:
          name: Validate the syntax of Terraform scripts
          command: terraform validate
          working_directory: terraform-digitalocean
      - run:
          name: Plan for the changes
          command: terraform plan -out main
          working_directory: terraform-digitalocean
      - run:
          name: Apply the changes
          command: terraform apply main
          working_directory: terraform-digitalocean
          no_output_timeout: 60m
      - store_artifacts:
          path: ~/client.ovpn
          destination: client.ovpn

  deploy_ec2:
    <<: *config
    steps:
      - checkout
      - run:
          name: Configure credentials for accessing Terraform Cloud backend
          command: echo $TERRAFORM_TOKEN | base64 -di > ~/.terraformrc
      - run:
          name: Create .ssh directory to store keys
          command: mkdir -p /home/ubuntu/.ssh && mkdir ~/.ssh
      - run:
          name: Configure API private key for provisioning the system
          command: echo $API_PRIVATE_KEY | base64 -di > /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Configure SSH private key for accessing the system to be provisioned
          command: echo $SSH_PRIVATE_KEY | base64 -di > ~/.ssh/hkvpn.key
      - run:
          name: Change API private key permission
          command: chmod 400 /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Change SSH private key permission
          command: chmod 400 ~/.ssh/hkvpn.key
      - run:
          name: Create Ansible Vault password file
          command: echo $VAULT_PASSWORD_FILE | base64 -di > ~/vault.pass
      - run:
          name: Initialize Terraform backend and plugins
          command: echo 1 | terraform init
          working_directory: terraform-ec2
      - run:
          name: Validate the syntax of Terraform scripts
          command: terraform validate
          working_directory: terraform-ec2
      - run:
          name: Plan for the changes
          command: terraform plan -out main
          working_directory: terraform-ec2
      - run:
          name: Apply the changes
          command: terraform apply main
          working_directory: terraform-ec2
          no_output_timeout: 60m
      - store_artifacts:
          path: ~/client.ovpn
          destination: client.ovpn

  deploy_lightsail:
    <<: *config
    steps:
      - checkout
      - run:
          name: Configure credentials for accessing Terraform Cloud backend
          command: echo $TERRAFORM_TOKEN | base64 -di > ~/.terraformrc
      - run:
          name: Create .ssh directory to store keys
          command: mkdir -p /home/ubuntu/.ssh && mkdir ~/.ssh
      - run:
          name: Configure API private key for provisioning the system
          command: echo $API_PRIVATE_KEY | base64 -di > /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Configure SSH private key for accessing the system to be provisioned
          command: echo $SSH_PRIVATE_KEY | base64 -di > ~/.ssh/hkvpn.key
      - run:
          name: Change API private key permission
          command: chmod 400 /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Change SSH private key permission
          command: chmod 400 ~/.ssh/hkvpn.key
      - run:
          name: Create Ansible Vault password file
          command: echo $VAULT_PASSWORD_FILE | base64 -di > ~/vault.pass
      - run:
          name: Initialize Terraform backend and plugins
          command: echo 1 | terraform init
          working_directory: terraform-lightsail
      - run:
          name: Validate the syntax of Terraform scripts
          command: terraform validate
          working_directory: terraform-lightsail
      - run:
          name: Plan for the changes
          command: terraform plan -out main
          working_directory: terraform-lightsail
      - run:
          name: Apply the changes
          command: terraform apply main
          working_directory: terraform-lightsail
          no_output_timeout: 60m
      - store_artifacts:
          path: ~/client.ovpn
          destination: client.ovpn

  deploy_oracle:
    <<: *config
    steps:
      - checkout
      - run:
          name: Configure credentials for accessing Terraform Cloud backend
          command: echo $TERRAFORM_TOKEN | base64 -di > ~/.terraformrc
      - run:
          name: Create .ssh directory to store keys
          command: mkdir -p /home/ubuntu/.ssh && mkdir ~/.ssh
      - run:
          name: Configure API private key for provisioning the system
          command: echo $API_PRIVATE_KEY | base64 -di > /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Configure SSH private key for accessing the system to be provisioned
          command: echo $SSH_PRIVATE_KEY | base64 -di > ~/.ssh/hkvpn.key
      - run:
          name: Configure SSH public key for accessing the system to be provisioned
          command: echo $SSH_PUBLIC_KEY | base64 -di > ~/.ssh/hkvpn.pub
      - run:
          name: Change API private key permission
          command: chmod 400 /home/ubuntu/.ssh/hkvpn.pem
      - run:
          name: Change SSH private key permission
          command: chmod 400 ~/.ssh/hkvpn.key
      - run:
          name: Create Ansible Vault password file
          command: echo $VAULT_PASSWORD_FILE | base64 -di > ~/vault.pass
      - run:
          name: Initialize Terraform backend and plugins
          command: echo 1 | terraform init
          working_directory: terraform-oracle
      - run:
          name: Validate the syntax of Terraform scripts
          command: terraform validate
          working_directory: terraform-oracle
      - run:
          name: Plan for the changes
          command: terraform plan -out main
          working_directory: terraform-oracle
      - run:
          name: Apply the changes
          command: terraform apply main
          working_directory: terraform-oracle
          no_output_timeout: 60m
      - store_artifacts:
          path: ~/client.ovpn
          destination: client.ovpn

workflows:
  version: 2
  workflow:
    jobs:
      - check
      - approve_digitalocean:
          type: approval
          requires:
            - check
      - approve_ec2:
          type: approval
          requires:
            - check
      - approve_lightsail:
          type: approval
          requires:
            - check
      - approve_oracle:
          type: approval
          requires:
            - check
      - deploy_digitalocean:
          requires:
            - check
            - approve_digitalocean
          filters:
            branches:
              only:
                - master
      - deploy_ec2:
          requires:
            - check
            - approve_ec2
          filters:
            branches:
              only:
                - master
      - deploy_lightsail:
          requires:
            - check
            - approve_lightsail
          filters:
            branches:
              only:
                - master
      - deploy_oracle:
          requires:
            - check
            - approve_oracle
          filters:
            branches:
              only:
                - master
